{"version":3,"sources":["helper.js","Flow.js","Story.js","EditFlow.js","Editor.js","App.js","reportWebVitals.js","index.js"],"names":["toBase36","x","xString","toString","length","fromBase36","parseInt","e","flowhashToJson","flowhash","retval","i","chunk","substr","flowid","pathselection","String","Flow","flow","setFlowhash","pathSelection","flowhashjson","parsePathSelection","handlePathSelectChange","target","value","className","children","text","paths","map","path","type","name","onChange","checked","next","style","JSON","stringify","Story","story","useParams","history","useHistory","React","useState","snippets","setSnippets","getNextKey","getValidKeys","useCallback","validkeys","push","nextkey","useEffect","newSnippets","start","k","console","log","snippet","display","newflashjson","vk","Object","keys","forEach","key","base36key","jsonToFlowhash","to","window","location","href","EditFlow","setStory","displayFlow","setDisplayFlow","onClick","updatedStory","parse","float","index","splice","handlePathDelete","handlePathText","handlePathNext","flowKey","j","selected","handlePathSnippet","defaultValue","links","handlePathLinks","known","handlePathKnown","Editor","localStorage","getItem","dragon","setItem","nextId","storyflow","getNextId","clear","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"2MAGO,SAASA,EAAUC,GACtB,IAAIC,EAAWD,EAAKA,EAAEE,SAAS,IAAM,IAIrC,OAHID,EAAQE,OAAS,IACnBF,EAAU,IAAMA,GAEXA,EAGJ,SAASG,EAAYH,GACxB,IACE,OAAOI,SAASJ,EAAS,IAC1B,MAAMK,GACL,OAAO,GAIN,SAASC,EAAeC,GAE3B,IADA,IAAIC,EAAS,GACJC,EAAI,EAAGA,EAAIF,EAASL,OAAQO,GAAG,EAAE,CACtC,IAAMC,EAAQH,EAASI,OAAOF,EAAE,GAC1BG,EAAST,EAAWO,EAAMC,OAAO,EAAE,IACnCE,EAAgBV,EAAWO,EAAMC,OAAO,EAAE,IAChDH,EAAOM,OAAOF,IAAWE,OAAOD,GAIpC,OAAOL,E,WCSIO,MAlCf,SAASA,EAAT,GAAwD,IAAxCC,EAAuC,EAAvCA,KAAMJ,EAAiC,EAAjCA,OAAQL,EAAyB,EAAzBA,SAAUU,EAAe,EAAfA,YAQhCC,EANuB,WAEvB,IAAMC,EAAeb,EAAeC,GAEpC,OAASY,EAAaP,IAAqC,IAAzBO,EAAaP,GAAiBO,EAAaP,IAAW,EAExEQ,GAEdC,EAAyB,SAAChB,GAC5BY,EAAYL,EAAQP,EAAEiB,OAAOC,QAGjC,OACI,sBAAKC,UAAU,OAAf,UACA,cAAC,IAAD,CAAeC,SAAUT,EAAKJ,GAAQc,OACtC,6BACMV,EAAKJ,GAAQe,MAAMC,KAAI,SAACC,EAAMpB,GAE5B,OAAO,6BAAY,kCAAO,uBAAOqB,KAAK,QAAQC,KAAMnB,EAAQW,MAAOd,EAAGuB,SAAUX,EAAwBY,QAAUf,IAAkBJ,OAAOL,KAAxH,IAAgI,cAAC,IAAD,CAAegB,SAAUI,EAAKH,WAAjKjB,SAID,IAAnBS,GAAwBF,EAAKJ,GAAQe,MAAMT,GAAegB,KAAS,cAACnB,EAAD,CAAMC,KAAMA,EAAMJ,OAAQI,EAAKJ,GAAQe,MAAMT,GAAegB,KAAM3B,SAAUA,EAAUU,YAAaA,IAAuB,GAGjM,qBAAKkB,MAAQ,CAAE,QAAW,QAA1B,SACKC,KAAKC,UAAUrB,EAAM,KAAM,S,eCmEzBsB,MAzFf,YAA2B,IAAVC,EAAS,EAATA,MAGb,EAAwBC,cAAlBjC,gBAAN,MAAiB,GAAjB,EACIkC,EAAUC,cACd,EAAiCC,IAAMC,SAAS,IAAhD,mBAAQC,EAAR,KAAkBC,EAAlB,KAEMC,EAAa,SAAC/B,EAAMJ,EAAQO,GAC9B,OAAQH,EAAKJ,GAAQe,MAAMR,EAAaP,KAAYI,EAAKJ,GAAQe,MAAMR,EAAaP,IAASsB,KAAQlB,EAAKJ,GAAQe,MAAMR,EAAaP,IAASsB,MAAQ,GAEpJc,EAAeC,uBAAY,SAACjC,EAAMJ,EAAQO,GAC5C,IAAM+B,EAAY,GAClBA,EAAUC,KAAKvC,GAEf,IADA,IAAIwC,EAAUL,EAAW/B,EAAKJ,EAAQO,IACnB,IAAbiC,GACFF,EAAUC,KAAKC,GACfA,EAAUL,EAAW/B,EAAKoC,EAASjC,GAMvC,OAAO+B,IAER,IA4CH,OAjBAG,qBAAU,WACN,IADY,EACRC,EAAc,GACZnC,EAAeb,EAAeC,GAC9B2C,EAAYF,EAAaT,EAAMvB,KAAMuB,EAAMgB,MAAOpC,GAH5C,cAKG+B,GALH,IAKZ,2BAAyB,CAAC,IAAhBM,EAAe,QACrBC,QAAQC,IAAI,WACZD,QAAQC,IAAIF,GACRrC,EAAaqC,KACbF,GAAef,EAAMvB,KAAKwC,GAAG7B,MAAMR,EAAaqC,IAAIG,QAAU,MAT1D,8BAcZb,EAAYQ,KACb,CAAC/C,EAAUgC,EAAOS,EAAcF,IAG/B,gCACI,gEAAkC,sBAAMX,MAAQ,CAAEyB,QAAS,QAAzB,SAAoCrD,OACtE,qBAAKiB,UAAU,gBAAf,SACI,cAAC,EAAD,CAAMR,KAAMuB,EAAMvB,KAAMJ,OAAQ2B,EAAMgB,MAAOhD,SAAUA,EAAUU,YA9CzD,SAACL,EAAQM,GACzB,IAAMC,EAAeb,EAAeC,GAEpCY,EAAaP,GAAUM,EACvBuC,QAAQC,WAAW9C,GAEnB,IAAMsC,EAAYF,EAAaT,EAAMvB,KAAMuB,EAAMgB,MAAOpC,GACxDsC,QAAQC,IAAIvC,GACZsC,QAAQC,IAAIR,GACZ,IAT2C,EASrCW,EAAe,GATsB,cAU5BX,GAV4B,IAU3C,IAAI,EAAJ,qBAAyB,CAAC,IAAjBY,EAAgB,QACrBL,QAAQC,IAAII,GACZL,QAAQC,WAAWI,GACf3C,EAAa2C,KACbD,EAAaC,GAAM3C,EAAa2C,KAdG,8BAmB3CL,QAAQC,IAAIG,GAEZpB,EAAQU,KAAK,IFzBd,SAAwBhC,GAC3B,IAAIZ,EAAW,GAQf,OAPAwD,OAAOC,KAAK7C,GAAc8C,SAAS,SAACC,GAChCT,QAAQC,IAAI,WAAaQ,GACzB,IAAIC,EAAYrE,EAASM,SAAS8D,IAClCT,QAAQC,IAAI,UAAYS,GACxB5D,GAAY4D,EACZ5D,GAAYT,EAASqB,EAAa+C,OAE/B3D,EEgBc6D,CAAeP,IAChCf,EApBkB,SA8Cd,qBAAKtB,UAAU,oBAAf,SACI,cAAC,IAAD,CAAeC,SAAUoB,MAE7B,qBAAKV,MAAQ,CAAE,QAAW,QAA1B,SACKC,KAAKC,UAAUE,EAAO,KAAM,KAEhB,KAAbhC,EACJ,sBAAKiB,UAAU,aAAf,+BACsB,cAAC,IAAD,CAAM6C,GAAK9D,EAAX,SAAsB+D,OAAOC,SAASC,UAE1D,OCJCC,MAxFf,YAAsD,IAAlC7D,EAAiC,EAAjCA,OAAQI,EAAyB,EAAzBA,KAAMuB,EAAmB,EAAnBA,MAAOmC,EAAY,EAAZA,SACrC,EAAsC/B,IAAMC,UAAS,GAArD,mBAAO+B,EAAP,KAAoBC,EAApB,KAwDA,OACI,8BACI,qCAAU,iCAAShE,IACnB,wBAAQiE,QAnBS,WACrB,IAAMC,EAAe1C,KAAK2C,MAAM3C,KAAKC,UAAUE,WACxCuC,EAAavC,MAAMvB,KAAKJ,GAC/B8D,EAASI,IAgBL,yBACA,2CAAa,uBAAOhD,KAAK,OAAOE,SAvDjB,SAAC3B,GACpB,IAAMyE,EAAe1C,KAAK2C,MAAM3C,KAAKC,UAAUE,IAC/CuC,EAAavC,MAAMvB,KAAKJ,GAAQc,KAAOrB,EAAEiB,OAAOC,MAChDmD,EAASI,IAoDqDvD,MAAOP,EAAKU,UACtE,wBAAQmD,QA3DU,WACtBD,GAAgBD,IA0DwBxC,MAAQ,CAAC6C,MAAO,SAApD,SAAkEL,EAAe,OAAS,SAC1F,sBAAKxC,MAAQ,CAAE,QAAYwC,EAAe,QAAU,QAApD,mBACC3D,EAAKW,MAAMC,KAAI,SAACC,EAAMpB,GACnB,OAAQ,qCAAkB,iCAASA,IAC/B,wBAAQoE,QAAS,SAACxE,GAAD,OA9BR,SAACA,EAAG4E,GACzB,IAAMH,EAAe1C,KAAK2C,MAAM3C,KAAKC,UAAUE,IAC/CuC,EAAavC,MAAMvB,KAAKJ,GAAQe,MAAMuD,OAAOD,EAAM,GACnDP,EAASI,GA2B2BK,CAAiB9E,EAAGI,IAA5C,yBACA,2CAAa,uBAAOqB,KAAK,OAAOE,SAAU,SAAC3B,GAAD,OAxDnC,SAACA,EAAG4E,GACvB,IAAMH,EAAe1C,KAAK2C,MAAM3C,KAAKC,UAAUE,IAC/CuC,EAAavC,MAAMvB,KAAKJ,GAAQe,MAAMsD,GAAOvD,KAAOrB,EAAEiB,OAAOC,MAC7DmD,EAASI,GAqDoDM,CAAe/E,EAAGI,IAAIc,MAAOM,EAAKH,UACnF,2CAAa,yBAAQM,SAAU,SAAC3B,GAAD,OApDxB,SAACA,EAAG4E,GACvB,IAAMH,EAAe1C,KAAK2C,MAAM3C,KAAKC,UAAUE,IAC/CuC,EAAavC,MAAMvB,KAAKJ,GAAQe,MAAMsD,GAAO/C,KAAO7B,EAAEiB,OAAOC,MAC7DmD,EAASI,GAiDyCO,CAAehF,EAAGI,IAA3C,UACT,2CAEIsD,OAAOC,KAAKzB,EAAMA,MAAMvB,MAAMY,KAAI,SAAC0D,EAASC,GACxC,OAAQ,yBAAQhE,MAAO+D,EAASE,SAAW3D,EAAKK,OAASoD,EAAjD,cAA6DA,EAA7D,KAAwE/C,EAAMA,MAAMvB,KAAKsE,GAAS5D,iBAItH,8CAAgB,0BAAUM,SAAU,SAAC3B,GAAD,OAvD1B,SAACA,EAAG4E,GAC1B,IAAMH,EAAe1C,KAAK2C,MAAM3C,KAAKC,UAAUE,IAC/CuC,EAAavC,MAAMvB,KAAKJ,GAAQe,MAAMsD,GAAOtB,QAAUtD,EAAEiB,OAAOC,MAChEmD,EAASI,GAoD8CW,CAAkBpF,EAAGI,IAAIiF,aAAc7D,EAAK8B,aACvF,qDAAuB,0BAAU3B,SAAU,SAAC3B,GAAD,OAnDnC,SAACA,EAAG4E,GACxB,IAAMH,EAAe1C,KAAK2C,MAAM3C,KAAKC,UAAUE,IAC/CuC,EAAavC,MAAMvB,KAAKJ,GAAQe,MAAMsD,GAAOU,MAAQtF,EAAEiB,OAAOC,MAC9DmD,EAASI,GAgDqDc,CAAgBvF,EAAGI,IAAIiF,aAAc7D,EAAK8D,WAC5F,mDAAqB,0BAAU3D,SAAU,SAAC3B,GAAD,OA/CjC,SAACA,EAAG4E,GACxB,IAAMH,EAAe1C,KAAK2C,MAAM3C,KAAKC,UAAUE,IAC/CuC,EAAavC,MAAMvB,KAAKJ,GAAQe,MAAMsD,GAAOY,MAAQxF,EAAEiB,OAAOC,MAC9DmD,EAASI,GA4CmDgB,CAAgBzF,EAAGI,IAAIiF,aAAc7D,EAAKgE,aAbvEpF,MAgB3B,wBAAQoE,QAnCA,WACZ,IAAMC,EAAe1C,KAAK2C,MAAM3C,KAAKC,UAAUE,IAC/CuC,EAAavC,MAAMvB,KAAKJ,GAAQe,MAAMwB,KAClC,CACI,KAAQ,gCACR,KAAQ,GACR,QAAW,KAGnBuB,EAASI,IA0BL,+BCdGiB,MAjEf,WACI,MAA2BpD,IAAMC,SAAWoD,aAAaC,QAAQ,eAAkB7D,KAAK2C,MAAMiB,aAAaC,QAAQ,gBAAkBC,GAArI,mBAAQ3D,EAAR,KAAemC,EAAf,KA4CA,OAnCA/B,IAAMU,WAAW,WACb2C,aAAaG,QAAQ,cAAe/D,KAAKC,UAAUE,MACpD,CAACA,IAkCA,gCACI,wCACA,sBAAKf,UAAU,gBAAf,UACI,4CAAc,uBAAOM,KAAK,OAAOE,SA9CzB,SAAC3B,GACjBoD,QAAQC,IAAI,gBAAkBrD,EAAEiB,OAAOC,OACvC,IAAMuD,EAAe1C,KAAK2C,MAAM3C,KAAKC,UAAUE,IAC/CuC,EAAavC,MAAMR,KAAO1B,EAAEiB,OAAOC,MACnCmD,EAASI,IA0CuDvD,MAAOgB,EAAMA,MAAMR,UACzEgC,OAAOC,KAAKzB,EAAMA,MAAMvB,MAAMY,KAAI,SAAC0D,EAAS7E,GAC1C,OAAO,cAAC,EAAD,CAAkBG,OAAQ0E,EAAStE,KAAMuB,EAAMA,MAAMvB,KAAKsE,GAAU/C,MAAOA,EAAOmC,SAAUA,GAA7EjE,MAE1B,wBAAQoE,QA7BJ,WACZ,IAAMC,EAAe1C,KAAK2C,MAAM3C,KAAKC,UAAUE,IAC3C6D,EAZU,SAACC,GACf,IAAID,EAAS,EAOb,OANArC,OAAOC,KAAKqC,GAAWzE,KAAI,SAAC0D,GAIxB,OAHIlF,SAASkF,IAAYc,IACrBA,EAAShG,SAASkF,GAAW,GAE1B,MAEJc,EAAS,GAIHE,CAAUxB,EAAavC,MAAMvB,MAC1CyC,QAAQC,IAAI,oBAAsB0C,GAClCtB,EAAavC,MAAMvB,KAAKoF,GAAU,CAC9B,KAAQ,gCACR,MAAS,CACL,CACI,KAAQ,gCACR,KAAQ,GACR,QAAW,MAIvB1B,EAASI,IAeD,yBAEJ,qBAAKtD,UAAU,oBAAf,SACI,8BACKY,KAAKC,UAAUE,EAAO,KAAM,OAGrC,wBAAQsC,QAnBU,WACtBmB,aAAaO,SAkBT,qCCnBGC,MAhCf,WACE,OACE,qBAAKhF,UAAU,MAAf,SACE,cAAC,IAAD,UACE,eAAC,IAAD,WACE,cAAC,IAAD,CAAOK,KAAK,UAAZ,SACE,cAAC,EAAD,MAEF,cAAC,IAAD,CAAOA,KAAK,cAAZ,SACE,cAAC,EAAD,CAAOU,MAAO2D,EAAO3D,kBCVlBkE,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,8BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,K","file":"static/js/main.1ce8ae7c.chunk.js","sourcesContent":["// Base 36 allows for 1295 different options... should be plenty\n\n//x is a parseInt value\nexport function toBase36 (x) {\n    let xString = (x) ? x.toString(36) : '0';\n    if (xString.length % 2) {\n      xString = '0' + xString;\n    }\n    return xString\n}\n\nexport function fromBase36 (xString) {\n    try {\n      return parseInt(xString, 36);\n    }catch(e){\n      return 0;\n    }\n}\n\nexport function flowhashToJson(flowhash){\n    let retval = {}\n    for( let i = 0; i < flowhash.length; i+=4){\n        const chunk = flowhash.substr(i,4)\n        const flowid = fromBase36(chunk.substr(0,2))\n        const pathselection = fromBase36(chunk.substr(2,2))\n        retval[String(flowid)] = String(pathselection)\n    }\n    //console.log(\"flowhashtojson\")\n    //console.log(retval)\n    return retval\n}\n\nexport function jsonToFlowhash(flowhashjson){\n    let flowhash = \"\"\n    Object.keys(flowhashjson).forEach( (key) => {\n        console.log('Before: ' + key)\n        let base36key = toBase36(parseInt(key))\n        console.log('After: ' + base36key)\n        flowhash += base36key\n        flowhash += toBase36(flowhashjson[key])\n    })\n    return flowhash\n}","import React from 'react';\nimport ReactMarkdown from 'react-markdown'\nimport { flowhashToJson } from './helper'\n\nfunction Flow( {flow, flowid, flowhash, setFlowhash} ) {\n    \n    const parsePathSelection = () => {\n\n        const flowhashjson = flowhashToJson(flowhash)\n\n        return ( flowhashjson[flowid] ||  flowhashjson[flowid] === 0) ? flowhashjson[flowid] : -1\n    }\n    let pathSelection = parsePathSelection()\n\n    const handlePathSelectChange = (e) => {\n        setFlowhash(flowid, e.target.value)\n    }\n\n    return (\n        <div className=\"flow\">\n        <ReactMarkdown children={flow[flowid].text} />\n        <ul>\n            { flow[flowid].paths.map((path, i) => {\n                // eslint-disable-next-line\n                return <li key={i}><label><input type=\"radio\" name={flowid} value={i} onChange={handlePathSelectChange} checked={ pathSelection === String(i) } /> <ReactMarkdown children={path.text} /></label></li>\n            })}\n        </ul>\n        \n        { ( pathSelection !== -1 && flow[flowid].paths[pathSelection].next ) ? <Flow flow={flow} flowid={flow[flowid].paths[pathSelection].next} flowhash={flowhash} setFlowhash={setFlowhash}></Flow> : \"\"  }\n        \n        \n        <pre style={ { \"display\": \"none\" } }>\n            {JSON.stringify(flow, null, 2)}\n        </pre>\n        </div>\n    )\n}\n\nexport default Flow","import React, {useEffect, useCallback} from 'react';\nimport ReactMarkdown from 'react-markdown'\nimport Flow from './Flow'\nimport { flowhashToJson, jsonToFlowhash } from './helper'\nimport {\n    useParams,\n    useHistory,\n    Link\n  } from \"react-router-dom\";\n\nfunction Story( {story} ) {\n\n    //const [ flowhash, flowhashSetter] = React.useState(\"\")\n    let { flowhash = \"\" } = useParams()\n    let history = useHistory();\n    const [ snippets, setSnippets] = React.useState(\"\")\n\n    const getNextKey = (flow, flowid, flowhashjson) => {\n        return (flow[flowid].paths[flowhashjson[flowid]] && flow[flowid].paths[flowhashjson[flowid]].next) ? flow[flowid].paths[flowhashjson[flowid]].next : -1\n    }\n    const getValidKeys = useCallback((flow, flowid, flowhashjson) => {\n        const validkeys = []\n        validkeys.push(flowid)\n        let nextkey = getNextKey(flow,flowid, flowhashjson)\n        while(nextkey !== -1){\n            validkeys.push(nextkey)\n            nextkey = getNextKey(flow,nextkey, flowhashjson)\n        }\n        \n        //console.log(nextkey)\n\n\n        return validkeys\n        \n    }, [])\n\n    const setFlowhash = (flowid, pathSelection) => {\n        const flowhashjson = flowhashToJson(flowhash)\n        let newSnippets = \"\"\n        flowhashjson[flowid] = pathSelection\n        console.log(typeof flowid)\n        //TODO get a list of valid indexes\n        const validkeys = getValidKeys(story.flow, story.start, flowhashjson)\n        console.log(flowhashjson)\n        console.log(validkeys)\n        const newflashjson = {}\n        for( let vk of validkeys){\n            console.log(vk)\n            console.log(typeof vk)\n            if (flowhashjson[vk]) {\n                newflashjson[vk] = flowhashjson[vk]\n                //newSnippets += story.flow[vk].paths[newflashjson[vk]].snippet + \" \"\n            }\n             \n        }\n        console.log(newflashjson)\n        //flowhashSetter(jsonToFlowhash(newflashjson))\n        history.push('/'+jsonToFlowhash(newflashjson))\n        setSnippets(newSnippets)\n    }   \n\n    useEffect(() => {\n        let newSnippets = \"\"\n        const flowhashjson = flowhashToJson(flowhash)\n        const validkeys = getValidKeys(story.flow, story.start, flowhashjson)\n       \n        for ( let k of validkeys){\n            console.log('snippet')\n            console.log(k)\n            if (flowhashjson[k]){\n                newSnippets += story.flow[k].paths[flowhashjson[k]].snippet + \" \"\n            }\n            \n        }\n\n        setSnippets(newSnippets)\n    }, [flowhash, story, getValidKeys, setSnippets]);\n\n    return (\n        <div>\n            <h1>Hello, it is time for a story <span style={ { display: \"none\" }}>{flowhash}</span></h1>\n            <div className=\"flowcontainer\">\n                <Flow flow={story.flow} flowid={story.start} flowhash={flowhash} setFlowhash={setFlowhash}></Flow>\n            </div>\n            <div className=\"markdowncontainer\">\n                <ReactMarkdown children={snippets} />\n            </div>\n            <pre style={ { \"display\": \"none\" } }>\n                {JSON.stringify(story, null, 2)}\n            </pre>\n            { ( flowhash !== \"\") ?\n            <div className=\"sharestory\">\n                Share your story: <Link to={ flowhash}>{window.location.href}</Link>\n            </div>\n            : \"\"}\n        </div>\n    )\n}\n\nexport default Story","import React from 'react';\n\nfunction EditFlow( {flowid, flow, story, setStory} ) {\n    const [displayFlow, setDisplayFlow] = React.useState(true)\n\n    const toggleDisplayFlow = () => {\n        setDisplayFlow(!displayFlow)\n    }\n    const handleFlowText = (e) => {\n        const updatedStory = JSON.parse(JSON.stringify(story));\n        updatedStory.story.flow[flowid].text = e.target.value\n        setStory(updatedStory)\n    }\n    const handlePathText = (e, index) => {\n        const updatedStory = JSON.parse(JSON.stringify(story));\n        updatedStory.story.flow[flowid].paths[index].text = e.target.value\n        setStory(updatedStory)\n    }\n    const handlePathNext = (e, index) => {\n        const updatedStory = JSON.parse(JSON.stringify(story));\n        updatedStory.story.flow[flowid].paths[index].next = e.target.value\n        setStory(updatedStory)\n    }\n    const handlePathSnippet = (e, index) => {\n        const updatedStory = JSON.parse(JSON.stringify(story));\n        updatedStory.story.flow[flowid].paths[index].snippet = e.target.value\n        setStory(updatedStory)\n    }\n    const handlePathLinks = (e, index) => {\n        const updatedStory = JSON.parse(JSON.stringify(story));\n        updatedStory.story.flow[flowid].paths[index].links = e.target.value\n        setStory(updatedStory)\n    }\n    const handlePathKnown = (e, index) => {\n        const updatedStory = JSON.parse(JSON.stringify(story));\n        updatedStory.story.flow[flowid].paths[index].known = e.target.value\n        setStory(updatedStory)\n    }\n    const handlePathDelete = (e, index) => {\n        const updatedStory = JSON.parse(JSON.stringify(story));\n        updatedStory.story.flow[flowid].paths.splice(index,1)\n        setStory(updatedStory)\n    }\n    const handleDeleteFlow = () => {\n        const updatedStory = JSON.parse(JSON.stringify(story));\n        delete updatedStory.story.flow[flowid]\n        setStory(updatedStory)\n    }\n    const addPath = () => {\n        const updatedStory = JSON.parse(JSON.stringify(story));\n        updatedStory.story.flow[flowid].paths.push(\n            {\n                \"text\": \"Path Text...replace me please\",\n                \"next\": \"\",\n                \"snippet\": \"\"\n            }\n        )\n        setStory(updatedStory)\n    }\n    return (\n        <div>\n            <fieldset><legend>{flowid}</legend>\n            <button onClick={handleDeleteFlow}>Delete Flow</button>\n            <label>Text: <input type=\"text\" onChange={handleFlowText} value={flow.text} /></label>\n            <button onClick={toggleDisplayFlow} style={ {float: \"right\"} }>{ (displayFlow) ? \"Hide\" : \"Show\"}</button>\n            <div style={ { \"display\": (displayFlow) ? \"block\" : \"none\" }}>Paths:\n            {flow.paths.map((path, i) => {\n                return (<fieldset key={i}><legend>{i}</legend>\n                    <button onClick={(e) => handlePathDelete(e, i)}>Delete Path</button>\n                    <label>Text: <input type=\"text\" onChange={(e) => handlePathText(e, i)} value={path.text} /></label>\n                    <label>Next: <select onChange={(e) => handlePathNext(e, i)}>\n                        <option>[End]</option>\n                        {\n                            Object.keys(story.story.flow).map((flowKey, j) => {\n                                return (<option value={flowKey} selected={(path.next === flowKey)}>({flowKey}) {story.story.flow[flowKey].text}</option>)\n                            })\n                        }\n                    </select></label>\n                    <label>Snippet: <textarea onChange={(e) => handlePathSnippet(e, i)} defaultValue={path.snippet}></textarea></label>\n                    <label>Relevant Links: <textarea onChange={(e) => handlePathLinks(e, i)} defaultValue={path.links}></textarea></label>\n                    <label>What We Know: <textarea onChange={(e) => handlePathKnown(e, i)} defaultValue={path.known}></textarea></label>\n                </fieldset>)\n            })}\n            <button onClick={addPath}>Add Path</button>\n            </div>\n            </fieldset>\n        </div>\n    )\n}\n\nexport default EditFlow","import React from 'react';\nimport EditFlow from './EditFlow'\nimport dragon from './stories/dragon.json'\n\nfunction Editor( ) {\n    const [ story, setStory] = React.useState( (localStorage.getItem('editorstory')) ? JSON.parse(localStorage.getItem('editorstory')) : dragon )\n\n    const handleTitle = (e) => {\n        console.log(\"handleTitle: \" + e.target.value)\n        const updatedStory = JSON.parse(JSON.stringify(story)); \n        updatedStory.story.name = e.target.value\n        setStory(updatedStory)\n    }\n\n    React.useEffect( () => {\n        localStorage.setItem('editorstory', JSON.stringify(story));\n    }, [story])\n\n    const getNextId = (storyflow) => {\n        let nextId = 0\n        Object.keys(storyflow).map((flowKey) => {\n            if (parseInt(flowKey) >= nextId){\n                nextId = parseInt(flowKey) + 1\n            }\n            return \"\"\n        })\n        return nextId + \"\"\n    }\n    const addFlow = ()=> {\n        const updatedStory = JSON.parse(JSON.stringify(story));\n        let nextId = getNextId(updatedStory.story.flow)\n        console.log(\"trying to add... \" + nextId)\n        updatedStory.story.flow[nextId] = {\n            \"text\": \"Flow Text...replace me please\",\n            \"paths\": [\n                {\n                    \"text\": \"Path Text...replace me please\",\n                    \"next\": \"\",\n                    \"snippet\": \"\"\n                }\n            ]\n        }\n        setStory(updatedStory)\n    }\n\n    const clearLocalStorage = () => {\n        localStorage.clear()\n    }\n\n    return (\n        <div>\n            <h3>Editor</h3>\n            <div className=\"flowcontainer\">\n                <label>Title: <input type=\"text\" onChange={handleTitle} value={story.story.name} /></label>\n                { Object.keys(story.story.flow).map((flowKey, i) => {\n                    return <EditFlow key={i} flowid={flowKey} flow={story.story.flow[flowKey]} story={story} setStory={setStory}></EditFlow>\n                } )}\n                <button onClick={addFlow}>Add Flow</button>\n            </div>\n            <div className=\"markdowncontainer\">\n                <pre>\n                    {JSON.stringify(story, null, 2)}\n                </pre>\n            </div>\n            <button onClick={clearLocalStorage}>Clear Local Storage</button>\n        </div>\n    )\n}\n  \nexport default Editor","//import logo from './logo.svg';\nimport './App.css';\nimport dragon from './stories/dragon.json'\n\nimport Story from './Story'\nimport Editor from './Editor'\n\nimport {\n  HashRouter as Router,\n  Switch,\n  Route\n} from \"react-router-dom\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Router>\n        <Switch>\n          <Route path=\"/editor\">\n            <Editor ></Editor>\n          </Route>\n          <Route path=\"/:flowhash?\">\n            <Story story={dragon.story}></Story>\n          </Route>\n        </Switch>\n      </Router>\n\n      {/* <header className=\"App-header\">\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\n        <p>\n          Edit <code>src/App.js</code> and save to reload.\n        </p>\n        <a\n          className=\"App-link\"\n          href=\"https://reactjs.org\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          Learn React\n        </a>\n      </header> */}\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}